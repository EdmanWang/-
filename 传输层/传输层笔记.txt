传输层相关笔记：
1：传输层协议概括以及相关的概念：
    1.1：进程之间的通信：从通信和信息的角度去看，运输层是向应用层提供通信服务。
    1.2：传输层是面向通信部分中的最高层，同时也是用户功能中的最低层。
    1.3：通信的真正端点并不是主机也是主机中的进程。（但是从ip层的角度去看通信则：通信的端点是两台主机）
    1.4：分用和复用：
       （1）：复用：指的是在发送方不同的应用进程都是可以使用同一个传输层协议来传输数据（前提：加上适当的首部）。
	   （2）：分用：指的是接受方的运输层在剥去报文的首部之后能够把这些数据交付给目的应用进程。
    1.5：网络层是为主机之间提供的逻辑通信，运输层是为应用进程之间提供端到端的逻辑通信。
    1.6：传输层还需要对接收到的报文进行差错，网络层中的ip数据报首部中的检查只是检查首部是否出现了差错而不是去检查数据部分。
    1.7：传输层的两种传输协议：【1：面向连接的--TCP 2: 无连接的--UDP】
   
2：运输层的端口：
    2.1：为什么在通信的时候不使用进程号来进行通信而是使用端口。
        1：在互联网环境下，计算机的操作系统种类很多，而不同的操作系统使用的又是不同格式的进程标识符。
		2：计算机中进程号的创建和撤销都是动态的，通信的一方几乎无法识别对方机器的进程。
    2.2：使用端口号去解决端到端的通信。
        1：即：虽然通信的终点是应用进程，但是只要把所传递的报文交到目的主机某一个和合适的端口，剩下的工作（即：最后的交付目的进程）就是由tcp或者udp去完成。
    2.3：客户端使用的端口号和服务器段使用的端口号。
   
3：用户数据报协议【UDP】：
    3.1：UDP的主要特点：
        1：UDP是面向无连接的 -->即：发送数据前是不需要建立连接的。
		2：UDP使用尽最大努力交付的 -->即：不保证可靠性交付。
		3：UDP是面向报文的 -->即：发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。
		4：UDP没有拥塞控制 -->即：如果网络出现来拥塞不会使源主机的发送效率下降。
		5：UDP支持一对一，一对多，多对一，多对多。
		6：UDP的首部开销小，只有8个字节，比TCP的20个字节的首部要小。
		
4：传输控制协议【TCP】:
    4.1: TCP的主要特点：
        1：TCP是面向连接的传输层协议 -->即：应用程序在使用TCP协议之前，必须先要建立TCP连接。在传输数据完毕以后，必须要释放已经建立的连接。
		2：每一条TCP连接只能是连接两个端点：即每一条TCP连接只能是点对点。
		3：TCP是提供可靠交付的服务-->即：通过TCP连接传输的数据是无差错，不丢失，不重复，并且按照顺序到达。
		4：TCP是全双工通信-->即：允许双向发送数据。TCP在发送端和接收端都设有发送缓存和接收缓存，用来临时存放双向通信的数据。在发送的时候应用程序将会把数据传在TCP的发送缓存中，就可以做自己的事情了，而TCP会在合适的时候将数据发送出去。在接收时，TCP会把接收到的数据放在缓存中，上层的应用进程会在合适的时候来读取缓存中的数据。
		5：TCP是面向字节流-->即：TCP中的“流”指的是流入到进程或者从进程流出的字节序列。
	4.2：TCP的连接：
	    1：TCP连接的连个端点指的不是主机，不是主机的ip地址，不是应用进程，也不是传输层的协议端口。TCP连接的端点叫做套接字或者插口。
	    2：套接字【socket】 = IP地址 : 端口号。 
		
5：可靠传输的工作原理：
    5.1：停止等待协议：指的是发送方发送完一个分组以后就停止发送，等待对方的确认，在没有收到对方的确认之前是不会在发送分组【如果在等待一段时间内没有收到任何接收方的响应，则发送方就重新发送分组---这样的情况称为超时重传】，只有在接收到了对方发送过来的确认分组之后才会继续发送下一个分组。
	
6：TCP报文段的首部格式：
    6.1：源端口和目的端口。
	6.2：序号 ——> 发送方。
	6.3：确认号 ——> 接收方。 【序号和确认号详情请看截图--（tcp首部序号和确认号详情）】
	6.4：数据偏移：
	6.5：保留：
	6.6：紧急URG：
	6.7：确认ACK: 仅当ACK = 1的时确认号字段才有效，当ACK = 0的时候，确认号无效。TCP规定，在建立连接之后所有传送的报文段都必须把ACK置为1。
	6.8：推送PSH[PuSH]: 当两个进程之间进行交互式通信的时候，有时候一端的应用进程希望在写入一个命令后立即能够得到对方的响应。在这种情况下，TCP就可以使用推送【push】操作，这时发送方TCP将PSH置为1，并创建一个报文段发送出去，接收方TCP在接受到PSH = 1的报文段，就尽快的交付到应用程序，而不是等到整个缓存都填满后才向上交付。
	6.9：复位RST: 当RST = 1的时候，就是表明TCP连接出现严重的差错（例如：由于主机的崩溃或者其他的原因），这时候就必须释放连接，然后再重新建立运输连接。当RST置为1的时候还可以用来拒绝一个非法的报文段或者拒绝打开一个连接。
	6.10：同步SYN：在连接建立的时候用来同步序号，当SYN = 1 的时而ACK = 0的时候，表示这是一个连接请求报文段，如果对方同意建立连接，则在响应的报文段中使用SYN = 1和ACK = 1，因此SYN置为1就表示这是一个连接请求或者连接接收报文。
	6.11：终止FIN：用来释放一个连接。当FIN = 1的时候表示此报文段的发送方的数据已经发送完毕，并要求释放运输连接。
	6.12：窗口：窗口值作为接收方让发送方设置气发送窗口的依据。
	
7：TCP实现可靠传输：
    7.1：滑动窗口：
	7.2：超时重传：
	7.3：选择确认SACK：
	
8：TCP的流量控制：
    8.1：流量控制：指的是让发送方的发送效率不要太快，要让接收方来得及接收。
	8.2：利用滑动窗口来实现流量控制。
	
9：TCP的拥塞控制：

10：TCP的拥塞控制方法：
    10.1：满开始
	10.2：拥塞避免
	10.3：快重传
	10.4：快恢复
	
	
	